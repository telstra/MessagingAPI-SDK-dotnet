/* 
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Telstra.Messaging.Client;
using Telstra.Messaging.Model;

namespace Telstra.Messaging.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>List&lt;OutboundPollResponse&gt;</returns>
        List<OutboundPollResponse> GetMMSStatus (string messageid);

        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>ApiResponse of List&lt;OutboundPollResponse&gt;</returns>
        ApiResponse<List<OutboundPollResponse>> GetMMSStatusWithHttpInfo (string messageid);
        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>List&lt;OutboundPollResponse&gt;</returns>
        List<OutboundPollResponse> GetSMSStatus (string messageId);

        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>ApiResponse of List&lt;OutboundPollResponse&gt;</returns>
        ApiResponse<List<OutboundPollResponse>> GetSMSStatusWithHttpInfo (string messageId);
        /// <summary>
        /// MMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the MMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        HealthCheckResponse MMSHealthCheck ();

        /// <summary>
        /// MMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the MMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        ApiResponse<HealthCheckResponse> MMSHealthCheckWithHttpInfo ();
        /// <summary>
        /// Retrieve MMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMmsResponse</returns>
        GetMmsResponse RetrieveMMSReplies ();

        /// <summary>
        /// Retrieve MMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMmsResponse</returns>
        ApiResponse<GetMmsResponse> RetrieveMMSRepliesWithHttpInfo ();
        /// <summary>
        /// Retrieve SMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InboundPollResponse</returns>
        InboundPollResponse RetrieveSMSReplies ();

        /// <summary>
        /// Retrieve SMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InboundPollResponse</returns>
        ApiResponse<InboundPollResponse> RetrieveSMSRepliesWithHttpInfo ();
        /// <summary>
        /// SMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the SMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        HealthCheckResponse SMSHealthCheck ();

        /// <summary>
        /// SMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the SMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        ApiResponse<HealthCheckResponse> SMSHealthCheckWithHttpInfo ();
        /// <summary>
        /// Send Multiple SMS
        /// </summary>
        /// <remarks>
        /// Send multiple SMS in one API call. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>MessageSentResponseSms</returns>
        MessageSentResponseSms SMSMulti (SendSmsMultiRequest payload);

        /// <summary>
        /// Send Multiple SMS
        /// </summary>
        /// <remarks>
        /// Send multiple SMS in one API call. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseSms</returns>
        ApiResponse<MessageSentResponseSms> SMSMultiWithHttpInfo (SendSmsMultiRequest payload);
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>MessageSentResponseMms</returns>
        MessageSentResponseMms SendMMS (SendMmsRequest body);

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseMms</returns>
        ApiResponse<MessageSentResponseMms> SendMMSWithHttpInfo (SendMmsRequest body);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS Message to a single or multiple mobile number/s. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>MessageSentResponseSms</returns>
        MessageSentResponseSms SendSMS (SendSMSRequest payload);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS Message to a single or multiple mobile number/s. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseSms</returns>
        ApiResponse<MessageSentResponseSms> SendSMSWithHttpInfo (SendSMSRequest payload);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>Task of List&lt;OutboundPollResponse&gt;</returns>
        System.Threading.Tasks.Task<List<OutboundPollResponse>> GetMMSStatusAsync (string messageid);

        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>Task of ApiResponse (List&lt;OutboundPollResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OutboundPollResponse>>> GetMMSStatusAsyncWithHttpInfo (string messageid);
        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>Task of List&lt;OutboundPollResponse&gt;</returns>
        System.Threading.Tasks.Task<List<OutboundPollResponse>> GetSMSStatusAsync (string messageId);

        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>Task of ApiResponse (List&lt;OutboundPollResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OutboundPollResponse>>> GetSMSStatusAsyncWithHttpInfo (string messageId);
        /// <summary>
        /// MMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the MMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        System.Threading.Tasks.Task<HealthCheckResponse> MMSHealthCheckAsync ();

        /// <summary>
        /// MMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the MMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> MMSHealthCheckAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve MMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMmsResponse</returns>
        System.Threading.Tasks.Task<GetMmsResponse> RetrieveMMSRepliesAsync ();

        /// <summary>
        /// Retrieve MMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMmsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMmsResponse>> RetrieveMMSRepliesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve SMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InboundPollResponse</returns>
        System.Threading.Tasks.Task<InboundPollResponse> RetrieveSMSRepliesAsync ();

        /// <summary>
        /// Retrieve SMS Replies
        /// </summary>
        /// <remarks>
        /// Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InboundPollResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundPollResponse>> RetrieveSMSRepliesAsyncWithHttpInfo ();
        /// <summary>
        /// SMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the SMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        System.Threading.Tasks.Task<HealthCheckResponse> SMSHealthCheckAsync ();

        /// <summary>
        /// SMS Health Check
        /// </summary>
        /// <remarks>
        /// Determine whether the SMS service is up or down. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> SMSHealthCheckAsyncWithHttpInfo ();
        /// <summary>
        /// Send Multiple SMS
        /// </summary>
        /// <remarks>
        /// Send multiple SMS in one API call. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of MessageSentResponseSms</returns>
        System.Threading.Tasks.Task<MessageSentResponseSms> SMSMultiAsync (SendSmsMultiRequest payload);

        /// <summary>
        /// Send Multiple SMS
        /// </summary>
        /// <remarks>
        /// Send multiple SMS in one API call. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseSms)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSentResponseSms>> SMSMultiAsyncWithHttpInfo (SendSmsMultiRequest payload);
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>Task of MessageSentResponseMms</returns>
        System.Threading.Tasks.Task<MessageSentResponseMms> SendMMSAsync (SendMmsRequest body);

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseMms)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSentResponseMms>> SendMMSAsyncWithHttpInfo (SendMmsRequest body);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS Message to a single or multiple mobile number/s. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of MessageSentResponseSms</returns>
        System.Threading.Tasks.Task<MessageSentResponseSms> SendSMSAsync (SendSMSRequest payload);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS Message to a single or multiple mobile number/s. 
        /// </remarks>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseSms)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSentResponseSms>> SendSMSAsyncWithHttpInfo (SendSMSRequest payload);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApi : IMessagingApiSync, IMessagingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApi : IMessagingApi
    {
        private Telstra.Messaging.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApi(String basePath)
        {
            this.Configuration = Telstra.Messaging.Client.Configuration.MergeConfigurations(
                Telstra.Messaging.Client.GlobalConfiguration.Instance,
                new Telstra.Messaging.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Telstra.Messaging.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Telstra.Messaging.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Telstra.Messaging.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagingApi(Telstra.Messaging.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Telstra.Messaging.Client.Configuration.MergeConfigurations(
                Telstra.Messaging.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Telstra.Messaging.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Telstra.Messaging.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Telstra.Messaging.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessagingApi(Telstra.Messaging.Client.ISynchronousClient client,Telstra.Messaging.Client.IAsynchronousClient asyncClient, Telstra.Messaging.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Telstra.Messaging.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Telstra.Messaging.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Telstra.Messaging.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Telstra.Messaging.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telstra.Messaging.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>List&lt;OutboundPollResponse&gt;</returns>
        public List<OutboundPollResponse> GetMMSStatus (string messageid)
        {
             Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>> localVarResponse = GetMMSStatusWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>ApiResponse of List&lt;OutboundPollResponse&gt;</returns>
        public Telstra.Messaging.Client.ApiResponse< List<OutboundPollResponse> > GetMMSStatusWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'messageid' when calling MessagingApi->GetMMSStatus");

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (messageid != null)
                localVarRequestOptions.PathParameters.Add("messageid", Telstra.Messaging.Client.ClientUtils.ParameterToString(messageid)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OutboundPollResponse> >("/messages/mms/{messageid}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMMSStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>Task of List&lt;OutboundPollResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<OutboundPollResponse>> GetMMSStatusAsync (string messageid)
        {
             Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>> localVarResponse = await GetMMSStatusAsyncWithHttpInfo(messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms </param>
        /// <returns>Task of ApiResponse (List&lt;OutboundPollResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>>> GetMMSStatusAsyncWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'messageid' when calling MessagingApi->GetMMSStatus");


            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (messageid != null)
                localVarRequestOptions.PathParameters.Add("messageid", Telstra.Messaging.Client.ClientUtils.ParameterToString(messageid)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OutboundPollResponse>>("/messages/mms/{messageid}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMMSStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMS Status If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>List&lt;OutboundPollResponse&gt;</returns>
        public List<OutboundPollResponse> GetSMSStatus (string messageId)
        {
             Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>> localVarResponse = GetSMSStatusWithHttpInfo(messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS Status If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>ApiResponse of List&lt;OutboundPollResponse&gt;</returns>
        public Telstra.Messaging.Client.ApiResponse< List<OutboundPollResponse> > GetSMSStatusWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApi->GetSMSStatus");

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (messageId != null)
                localVarRequestOptions.PathParameters.Add("messageId", Telstra.Messaging.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OutboundPollResponse> >("/messages/sms/{messageId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSMSStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMS Status If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>Task of List&lt;OutboundPollResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<OutboundPollResponse>> GetSMSStatusAsync (string messageId)
        {
             Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>> localVarResponse = await GetSMSStatusAsyncWithHttpInfo(messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SMS Status If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - --| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. </param>
        /// <returns>Task of ApiResponse (List&lt;OutboundPollResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<List<OutboundPollResponse>>> GetSMSStatusAsyncWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApi->GetSMSStatus");


            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (messageId != null)
                localVarRequestOptions.PathParameters.Add("messageId", Telstra.Messaging.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OutboundPollResponse>>("/messages/sms/{messageId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSMSStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMS Health Check Determine whether the MMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        public HealthCheckResponse MMSHealthCheck ()
        {
             Telstra.Messaging.Client.ApiResponse<HealthCheckResponse> localVarResponse = MMSHealthCheckWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// MMS Health Check Determine whether the MMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        public Telstra.Messaging.Client.ApiResponse< HealthCheckResponse > MMSHealthCheckWithHttpInfo ()
        {
            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< HealthCheckResponse >("/messages/mms/healthcheck", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MMSHealthCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// MMS Health Check Determine whether the MMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        public async System.Threading.Tasks.Task<HealthCheckResponse> MMSHealthCheckAsync ()
        {
             Telstra.Messaging.Client.ApiResponse<HealthCheckResponse> localVarResponse = await MMSHealthCheckAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// MMS Health Check Determine whether the MMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<HealthCheckResponse>> MMSHealthCheckAsyncWithHttpInfo ()
        {

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheckResponse>("/messages/mms/healthcheck", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MMSHealthCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve MMS Replies Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMmsResponse</returns>
        public GetMmsResponse RetrieveMMSReplies ()
        {
             Telstra.Messaging.Client.ApiResponse<GetMmsResponse> localVarResponse = RetrieveMMSRepliesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve MMS Replies Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMmsResponse</returns>
        public Telstra.Messaging.Client.ApiResponse< GetMmsResponse > RetrieveMMSRepliesWithHttpInfo ()
        {
            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GetMmsResponse >("/messages/mms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMMSReplies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve MMS Replies Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMmsResponse</returns>
        public async System.Threading.Tasks.Task<GetMmsResponse> RetrieveMMSRepliesAsync ()
        {
             Telstra.Messaging.Client.ApiResponse<GetMmsResponse> localVarResponse = await RetrieveMMSRepliesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve MMS Replies Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- | - -- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMmsResponse)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<GetMmsResponse>> RetrieveMMSRepliesAsyncWithHttpInfo ()
        {

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMmsResponse>("/messages/mms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveMMSReplies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve SMS Replies Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InboundPollResponse</returns>
        public InboundPollResponse RetrieveSMSReplies ()
        {
             Telstra.Messaging.Client.ApiResponse<InboundPollResponse> localVarResponse = RetrieveSMSRepliesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve SMS Replies Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InboundPollResponse</returns>
        public Telstra.Messaging.Client.ApiResponse< InboundPollResponse > RetrieveSMSRepliesWithHttpInfo ()
        {
            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InboundPollResponse >("/messages/sms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSMSReplies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve SMS Replies Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InboundPollResponse</returns>
        public async System.Threading.Tasks.Task<InboundPollResponse> RetrieveSMSRepliesAsync ()
        {
             Telstra.Messaging.Client.ApiResponse<InboundPollResponse> localVarResponse = await RetrieveSMSRepliesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve SMS Replies Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | - -- |- -- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InboundPollResponse)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<InboundPollResponse>> RetrieveSMSRepliesAsyncWithHttpInfo ()
        {

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InboundPollResponse>("/messages/sms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSMSReplies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SMS Health Check Determine whether the SMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HealthCheckResponse</returns>
        public HealthCheckResponse SMSHealthCheck ()
        {
             Telstra.Messaging.Client.ApiResponse<HealthCheckResponse> localVarResponse = SMSHealthCheckWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// SMS Health Check Determine whether the SMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        public Telstra.Messaging.Client.ApiResponse< HealthCheckResponse > SMSHealthCheckWithHttpInfo ()
        {
            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< HealthCheckResponse >("/messages/sms/healthcheck", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SMSHealthCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SMS Health Check Determine whether the SMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HealthCheckResponse</returns>
        public async System.Threading.Tasks.Task<HealthCheckResponse> SMSHealthCheckAsync ()
        {
             Telstra.Messaging.Client.ApiResponse<HealthCheckResponse> localVarResponse = await SMSHealthCheckAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// SMS Health Check Determine whether the SMS service is up or down. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<HealthCheckResponse>> SMSHealthCheckAsyncWithHttpInfo ()
        {

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheckResponse>("/messages/sms/healthcheck", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SMSHealthCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Multiple SMS Send multiple SMS in one API call. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>MessageSentResponseSms</returns>
        public MessageSentResponseSms SMSMulti (SendSmsMultiRequest payload)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms> localVarResponse = SMSMultiWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send Multiple SMS Send multiple SMS in one API call. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseSms</returns>
        public Telstra.Messaging.Client.ApiResponse< MessageSentResponseSms > SMSMultiWithHttpInfo (SendSmsMultiRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SMSMulti");

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = payload;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MessageSentResponseSms >("/messages/sms/multi", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SMSMulti", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Multiple SMS Send multiple SMS in one API call. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of MessageSentResponseSms</returns>
        public async System.Threading.Tasks.Task<MessageSentResponseSms> SMSMultiAsync (SendSmsMultiRequest payload)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms> localVarResponse = await SMSMultiAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send Multiple SMS Send multiple SMS in one API call. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseSms)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms>> SMSMultiAsyncWithHttpInfo (SendSmsMultiRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SMSMulti");


            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = payload;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageSentResponseSms>("/messages/sms/multi", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SMSMulti", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>MessageSentResponseMms</returns>
        public MessageSentResponseMms SendMMS (SendMmsRequest body)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseMms> localVarResponse = SendMMSWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseMms</returns>
        public Telstra.Messaging.Client.ApiResponse< MessageSentResponseMms > SendMMSWithHttpInfo (SendMmsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'body' when calling MessagingApi->SendMMS");

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MessageSentResponseMms >("/messages/mms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMMS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>Task of MessageSentResponseMms</returns>
        public async System.Threading.Tasks.Task<MessageSentResponseMms> SendMMSAsync (SendMmsRequest body)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseMms> localVarResponse = await SendMMSAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseMms)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<MessageSentResponseMms>> SendMMSAsyncWithHttpInfo (SendMmsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'body' when calling MessagingApi->SendMMS");


            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageSentResponseMms>("/messages/mms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMMS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send SMS Send an SMS Message to a single or multiple mobile number/s. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>MessageSentResponseSms</returns>
        public MessageSentResponseSms SendSMS (SendSMSRequest payload)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms> localVarResponse = SendSMSWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Send an SMS Message to a single or multiple mobile number/s. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>ApiResponse of MessageSentResponseSms</returns>
        public Telstra.Messaging.Client.ApiResponse< MessageSentResponseSms > SendSMSWithHttpInfo (SendSMSRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SendSMS");

            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Telstra.Messaging.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telstra.Messaging.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = payload;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< MessageSentResponseSms >("/messages/sms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSMS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send SMS Send an SMS Message to a single or multiple mobile number/s. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of MessageSentResponseSms</returns>
        public async System.Threading.Tasks.Task<MessageSentResponseSms> SendSMSAsync (SendSMSRequest payload)
        {
             Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms> localVarResponse = await SendSMSAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Send an SMS Message to a single or multiple mobile number/s. 
        /// </summary>
        /// <exception cref="Telstra.Messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. </param>
        /// <returns>Task of ApiResponse (MessageSentResponseSms)</returns>
        public async System.Threading.Tasks.Task<Telstra.Messaging.Client.ApiResponse<MessageSentResponseSms>> SendSMSAsyncWithHttpInfo (SendSMSRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new Telstra.Messaging.Client.ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SendSMS");


            Telstra.Messaging.Client.RequestOptions localVarRequestOptions = new Telstra.Messaging.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = payload;

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageSentResponseSms>("/messages/sms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSMS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
