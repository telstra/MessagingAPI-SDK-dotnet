/* 
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// MessageMulti
    /// </summary>
    [DataContract]
    public partial class MessageMulti :  IEquatable<MessageMulti>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageMulti" /> class.
        /// </summary>
        /// <param name="to">Phone number (in E.164 format) to send the SMS to. This number can be in international format &#x60;\&quot;to\&quot;: \&quot;+61412345678\&quot;&#x60; or in national format. .</param>
        /// <param name="body">The text body of the message. Messages longer than 160 characters will be counted as multiple messages.  This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device .</param>
        /// <param name="receiptOff">Whether Delivery Receipt will be sent back or not.  Setting this field to &#x60;true&#x60; will disable Delivery Receipts. The &#x60;notifyURL&#x60; field will be ignored, if there is one in the payload. An \&quot;OLD-NONEXISTANT-MESSAGE-ID\&quot; 400 error will also be returned upon Polling for the SMS Status. .</param>
        public MessageMulti(string to = default(string), string body = default(string), bool receiptOff = default(bool))
        {
            this.To = to;
            this.Body = body;
            this.ReceiptOff = receiptOff;
        }
        
        /// <summary>
        /// Phone number (in E.164 format) to send the SMS to. This number can be in international format &#x60;\&quot;to\&quot;: \&quot;+61412345678\&quot;&#x60; or in national format. 
        /// </summary>
        /// <value>Phone number (in E.164 format) to send the SMS to. This number can be in international format &#x60;\&quot;to\&quot;: \&quot;+61412345678\&quot;&#x60; or in national format. </value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The text body of the message. Messages longer than 160 characters will be counted as multiple messages.  This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device 
        /// </summary>
        /// <value>The text body of the message. Messages longer than 160 characters will be counted as multiple messages.  This field contains the message text, this can be up to 1900 (for a single recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile devices rarely support the full range of UTF-8 characters, it is possible that some characters may not be translated correctly by the mobile device </value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Whether Delivery Receipt will be sent back or not.  Setting this field to &#x60;true&#x60; will disable Delivery Receipts. The &#x60;notifyURL&#x60; field will be ignored, if there is one in the payload. An \&quot;OLD-NONEXISTANT-MESSAGE-ID\&quot; 400 error will also be returned upon Polling for the SMS Status. 
        /// </summary>
        /// <value>Whether Delivery Receipt will be sent back or not.  Setting this field to &#x60;true&#x60; will disable Delivery Receipts. The &#x60;notifyURL&#x60; field will be ignored, if there is one in the payload. An \&quot;OLD-NONEXISTANT-MESSAGE-ID\&quot; 400 error will also be returned upon Polling for the SMS Status. </value>
        [DataMember(Name="receiptOff", EmitDefaultValue=false)]
        public bool ReceiptOff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageMulti {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ReceiptOff: ").Append(ReceiptOff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageMulti);
        }

        /// <summary>
        /// Returns true if MessageMulti instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageMulti to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageMulti input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.ReceiptOff == input.ReceiptOff ||
                    this.ReceiptOff.Equals(input.ReceiptOff)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiptOff.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
