/* 
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// GetMmsResponse
    /// </summary>
    [DataContract]
    public partial class GetMmsResponse :  IEquatable<GetMmsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMmsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMmsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMmsResponse" /> class.
        /// </summary>
        /// <param name="status">The final state of the message.  (required).</param>
        /// <param name="destinationAddress">The number the message was sent to.  (required).</param>
        /// <param name="senderAddress">The number the message was sent from.  (required).</param>
        /// <param name="subject">The subject assigned to the message. .</param>
        /// <param name="messageId">Message Id assigned by the MMSC. .</param>
        /// <param name="apiMsgId">Message Id assigned by the API. .</param>
        /// <param name="sentTimestamp">Time handling of the message ended.  (required).</param>
        /// <param name="mMSContent">An array of content that was received in an MMS message.  (required).</param>
        public GetMmsResponse(string status = default(string), string destinationAddress = default(string), string senderAddress = default(string), string subject = default(string), string messageId = default(string), string apiMsgId = default(string), string sentTimestamp = default(string), List<MMSContent> mMSContent = default(List<MMSContent>))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetMmsResponse and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "destinationAddress" is required (not null)
            if (destinationAddress == null)
            {
                throw new InvalidDataException("destinationAddress is a required property for GetMmsResponse and cannot be null");
            }
            else
            {
                this.DestinationAddress = destinationAddress;
            }

            // to ensure "senderAddress" is required (not null)
            if (senderAddress == null)
            {
                throw new InvalidDataException("senderAddress is a required property for GetMmsResponse and cannot be null");
            }
            else
            {
                this.SenderAddress = senderAddress;
            }

            // to ensure "sentTimestamp" is required (not null)
            if (sentTimestamp == null)
            {
                throw new InvalidDataException("sentTimestamp is a required property for GetMmsResponse and cannot be null");
            }
            else
            {
                this.SentTimestamp = sentTimestamp;
            }

            // to ensure "mMSContent" is required (not null)
            if (mMSContent == null)
            {
                throw new InvalidDataException("mMSContent is a required property for GetMmsResponse and cannot be null");
            }
            else
            {
                this.MMSContent = mMSContent;
            }

            this.Subject = subject;
            this.MessageId = messageId;
            this.ApiMsgId = apiMsgId;
        }
        
        /// <summary>
        /// The final state of the message. 
        /// </summary>
        /// <value>The final state of the message. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The number the message was sent to. 
        /// </summary>
        /// <value>The number the message was sent to. </value>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// The number the message was sent from. 
        /// </summary>
        /// <value>The number the message was sent from. </value>
        [DataMember(Name="senderAddress", EmitDefaultValue=false)]
        public string SenderAddress { get; set; }

        /// <summary>
        /// The subject assigned to the message. 
        /// </summary>
        /// <value>The subject assigned to the message. </value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Message Id assigned by the MMSC. 
        /// </summary>
        /// <value>Message Id assigned by the MMSC. </value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Message Id assigned by the API. 
        /// </summary>
        /// <value>Message Id assigned by the API. </value>
        [DataMember(Name="apiMsgId", EmitDefaultValue=false)]
        public string ApiMsgId { get; set; }

        /// <summary>
        /// Time handling of the message ended. 
        /// </summary>
        /// <value>Time handling of the message ended. </value>
        [DataMember(Name="sentTimestamp", EmitDefaultValue=false)]
        public string SentTimestamp { get; set; }

        /// <summary>
        /// An array of content that was received in an MMS message. 
        /// </summary>
        /// <value>An array of content that was received in an MMS message. </value>
        [DataMember(Name="MMSContent", EmitDefaultValue=false)]
        public List<MMSContent> MMSContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMmsResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  ApiMsgId: ").Append(ApiMsgId).Append("\n");
            sb.Append("  SentTimestamp: ").Append(SentTimestamp).Append("\n");
            sb.Append("  MMSContent: ").Append(MMSContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMmsResponse);
        }

        /// <summary>
        /// Returns true if GetMmsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMmsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMmsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.SenderAddress == input.SenderAddress ||
                    (this.SenderAddress != null &&
                    this.SenderAddress.Equals(input.SenderAddress))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.ApiMsgId == input.ApiMsgId ||
                    (this.ApiMsgId != null &&
                    this.ApiMsgId.Equals(input.ApiMsgId))
                ) && 
                (
                    this.SentTimestamp == input.SentTimestamp ||
                    (this.SentTimestamp != null &&
                    this.SentTimestamp.Equals(input.SentTimestamp))
                ) && 
                (
                    this.MMSContent == input.MMSContent ||
                    this.MMSContent != null &&
                    input.MMSContent != null &&
                    this.MMSContent.SequenceEqual(input.MMSContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.SenderAddress != null)
                    hashCode = hashCode * 59 + this.SenderAddress.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.ApiMsgId != null)
                    hashCode = hashCode * 59 + this.ApiMsgId.GetHashCode();
                if (this.SentTimestamp != null)
                    hashCode = hashCode * 59 + this.SentTimestamp.GetHashCode();
                if (this.MMSContent != null)
                    hashCode = hashCode * 59 + this.MMSContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
