/* 
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// OutboundPollResponse
    /// </summary>
    [DataContract]
    public partial class OutboundPollResponse :  IEquatable<OutboundPollResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeliveryStatus
        /// </summary>
        [DataMember(Name="deliveryStatus", EmitDefaultValue=false)]
        public Status? DeliveryStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutboundPollResponse" /> class.
        /// </summary>
        /// <param name="to">The phone number (recipient) the message was sent to (in E.164 format). .</param>
        /// <param name="sentTimestamp">The date and time when the message was sent..</param>
        /// <param name="receivedTimestamp">The date and time when the message was recieved by recipient..</param>
        /// <param name="deliveryStatus">deliveryStatus.</param>
        public OutboundPollResponse(string to = default(string), string sentTimestamp = default(string), string receivedTimestamp = default(string), Status deliveryStatus = default(Status))
        {
            this.To = to;
            this.SentTimestamp = sentTimestamp;
            this.ReceivedTimestamp = receivedTimestamp;
            this.DeliveryStatus = deliveryStatus;
        }
        
        /// <summary>
        /// The phone number (recipient) the message was sent to (in E.164 format). 
        /// </summary>
        /// <value>The phone number (recipient) the message was sent to (in E.164 format). </value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The date and time when the message was sent.
        /// </summary>
        /// <value>The date and time when the message was sent.</value>
        [DataMember(Name="sentTimestamp", EmitDefaultValue=false)]
        public string SentTimestamp { get; set; }

        /// <summary>
        /// The date and time when the message was recieved by recipient.
        /// </summary>
        /// <value>The date and time when the message was recieved by recipient.</value>
        [DataMember(Name="receivedTimestamp", EmitDefaultValue=false)]
        public string ReceivedTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutboundPollResponse {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SentTimestamp: ").Append(SentTimestamp).Append("\n");
            sb.Append("  ReceivedTimestamp: ").Append(ReceivedTimestamp).Append("\n");
            sb.Append("  DeliveryStatus: ").Append(DeliveryStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutboundPollResponse);
        }

        /// <summary>
        /// Returns true if OutboundPollResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OutboundPollResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutboundPollResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.SentTimestamp == input.SentTimestamp ||
                    (this.SentTimestamp != null &&
                    this.SentTimestamp.Equals(input.SentTimestamp))
                ) && 
                (
                    this.ReceivedTimestamp == input.ReceivedTimestamp ||
                    (this.ReceivedTimestamp != null &&
                    this.ReceivedTimestamp.Equals(input.ReceivedTimestamp))
                ) && 
                (
                    this.DeliveryStatus == input.DeliveryStatus ||
                    this.DeliveryStatus.Equals(input.DeliveryStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.SentTimestamp != null)
                    hashCode = hashCode * 59 + this.SentTimestamp.GetHashCode();
                if (this.ReceivedTimestamp != null)
                    hashCode = hashCode * 59 + this.ReceivedTimestamp.GetHashCode();
                hashCode = hashCode * 59 + this.DeliveryStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
