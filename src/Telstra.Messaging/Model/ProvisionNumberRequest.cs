/* 
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// ProvisionNumberRequest
    /// </summary>
    [DataContract]
    public partial class ProvisionNumberRequest :  IEquatable<ProvisionNumberRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisionNumberRequest" /> class.
        /// </summary>
        /// <param name="activeDays">The number of days before for which this number is provisioned. .</param>
        /// <param name="notifyURL">A notification URL that will be POSTed to whenever a new message (i.e. a reply to a message sent) arrives at this destination address.  If this is not provided then you can use the Get /sms or /mms API to poll for reply messages.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).  *Please note that the notification URLs and the Get /sms or /mms call are exclusive. If a notification URL has been set then the GET call will not provide any useful information.* .</param>
        public ProvisionNumberRequest(int activeDays = default(int), string notifyURL = default(string))
        {
            this.ActiveDays = activeDays;
            this.NotifyURL = notifyURL;
        }
        
        /// <summary>
        /// The number of days before for which this number is provisioned. 
        /// </summary>
        /// <value>The number of days before for which this number is provisioned. </value>
        [DataMember(Name="activeDays", EmitDefaultValue=false)]
        public int ActiveDays { get; set; }

        /// <summary>
        /// A notification URL that will be POSTed to whenever a new message (i.e. a reply to a message sent) arrives at this destination address.  If this is not provided then you can use the Get /sms or /mms API to poll for reply messages.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).  *Please note that the notification URLs and the Get /sms or /mms call are exclusive. If a notification URL has been set then the GET call will not provide any useful information.* 
        /// </summary>
        /// <value>A notification URL that will be POSTed to whenever a new message (i.e. a reply to a message sent) arrives at this destination address.  If this is not provided then you can use the Get /sms or /mms API to poll for reply messages.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).  *Please note that the notification URLs and the Get /sms or /mms call are exclusive. If a notification URL has been set then the GET call will not provide any useful information.* </value>
        [DataMember(Name="notifyURL", EmitDefaultValue=false)]
        public string NotifyURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisionNumberRequest {\n");
            sb.Append("  ActiveDays: ").Append(ActiveDays).Append("\n");
            sb.Append("  NotifyURL: ").Append(NotifyURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisionNumberRequest);
        }

        /// <summary>
        /// Returns true if ProvisionNumberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisionNumberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisionNumberRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveDays == input.ActiveDays ||
                    this.ActiveDays.Equals(input.ActiveDays)
                ) && 
                (
                    this.NotifyURL == input.NotifyURL ||
                    (this.NotifyURL != null &&
                    this.NotifyURL.Equals(input.NotifyURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ActiveDays.GetHashCode();
                if (this.NotifyURL != null)
                    hashCode = hashCode * 59 + this.NotifyURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
